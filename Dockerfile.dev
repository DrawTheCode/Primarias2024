# Use the base node image
FROM node:18-alpine3.18 as base

# Create app directory
WORKDIR /home/app

# Install global packages
RUN npm install -g ts-node ts-node-dev

# Copy dependency files
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# Stage for installing dependencies
FROM base as dependencies

# Build arguments for UID and GID
ARG UID=1000
ARG GID=1000

# Create a non-root user and group with the specified UID and GID
RUN addgroup -g ${GID} appgroup && \
    adduser -D -u ${UID} -G appgroup appuser

# Set user to appuser
USER appuser

# Install dependencies based on the available lock file
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i; \
  # Allow install without lockfile, so example works even without Node.js installed locally
  else echo "Warning: Lockfile not found. It is recommended to commit lockfiles to version control." && npm install; \
  fi

# Copy lock files again (if they changed during install)
COPY yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# Final stage for the development build
FROM base as development

# Build arguments for UID and GID
ARG UID=1000
ARG GID=1000

# Create a non-root user and group with the specified UID and GID
RUN addgroup -g ${GID} appgroup && \
    adduser -D -u ${UID} -G appgroup appuser

# Set user to appuser
USER appuser

# Copy installed dependencies from previous stage
COPY --from=dependencies /home/app/node_modules ./node_modules

# Copy the rest of the application code
COPY . .

# Expose the port the app runs on
EXPOSE 3050

# Command to run the application
CMD ["ts-node-dev", "src/index.ts"]
